#lang racket/base

;;Signature: append(l1,l2)
;;Type: [List(T)*List(S) -> List(T|S)]
;;Purpose: concatenates the the list l2 to the list l1
;;Pre-condition: true
;;Tests: (append '(1 2 3) '(1 2)) -> '(1 2 3 1 2); (append '(3) '(3 1)) -> '(3 3 1);
(define append
    (lambda (l1 l2)
        (if (eq? l1 '())
            l2
            (cons (car l1) (append (cdr l1) l2))
        )
    )
)

;;Signature: reverse(l1)
;;Type: [List(T) -> List(T)]
;;Purpose: reverses the order of the elements in the list
;;Pre-condition: true
;;Tests: (reverse '(1 2 3)) -> '(3 2 1); (reverse '(3)) -> '(3);
(define reverse
    (lambda (l1)
        (if (eq? l1 '())
            '()
            (append(reverse(cdr l1)) (list(car l1)))
        )
    )
)



(define length
    (lambda (lst)
        (if (eq? lst '())
            0
            (+ 1 (length (cdr lst)))
        )
    )
)


;;Signature: duplicate-items(lst,dup-count)
;;Type: [List(T)*List(number) -> List(T)]
;;Purpose: duplicates each item of lst according to the number defined in the same position in dup-count. if dup-count is too short it loops around itself
;;Pre-condition: length(dup-count) > 0 
;;Tests: (duplicate-items '(1 2 3) '(1 2 3)) -> (1 2 2 3 3 3); (duplicate-items '(1 2 3) '(1 3)) -> (1 2 2 2 3);
(define duplicate-items
    (lambda (lst dup-count)
        (duplicate-items-inner lst (adjust-dup-count lst dup-count ))
    )
)
(define adjust-dup-count
    (lambda (lst dup-count)
        (define (cycle dup-count n)
        (if (<= n 0)
            '()
            (append dup-count (cycle dup-count (- n (length dup-count))))))
        (take (cycle dup-count (length lst)) (length lst)
        )
    )
)

(define take
    (lambda (lst n)
        (if (or (eq? lst '()) (<= n 0))
            '()
            (cons (car lst) (take (cdr lst) (- n 1)))
        )
    )
)

(define duplicate-helper
    (lambda (number count)
        (if (eq? count 0)
            '()
            (cons number (duplicate-helper number (- count 1)))
        )
    )
)

(define duplicate-items-inner
    (lambda (lst dup-count)
        (if (eq? lst '())
            '()
            (append (duplicate-helper (car lst) (car dup-count))
                    (duplicate-items-inner (cdr lst) (cdr dup-count))
            )
        )
    )
)


